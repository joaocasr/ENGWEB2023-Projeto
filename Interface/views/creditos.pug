doctype html
html
    head
        title Relatório
        link(rel='stylesheet', type='text/css', href='/stylesheets/w3.css')
    body
        .w3-top
            .w3-bar.w3-black.w3-card(style="height:100%;")
                p.w3-bar-item.w3-padding-large(style="font-size:16px;") BRAGA STREET VIEW
                p
                    a.w3-bar-item.w3-button.w3-padding-large(href="/ruas" ) HOME
                p
                    a.w3-bar-item.w3-button.w3-padding-large(href="/") LOGIN
                p(style="display:flex;justify-content:flex-end;margin-right:30px;")
                    a.w3-bar-item.w3-button.w3-padding-large(href="/logout") LOGOUT

        header.w3-display-container.w3-content.w3-wide(style="height: 50px;", id="home")

        .w3-content.w3-padding(style="max-width:1564px")
            .w3-container.w3-padding-32(id="rua" style="display:flex; justify-content:space-between; align-items:left;align-items:center;")
                h3.w3-border-bottom.w3-border-light-grey.w3-padding-16(style="flex-grow:1; font-weight: 600 !important;") Relatório do Projeto de Ruas de Braga

            //h1.w3-black.w3-margin.w3-padding Relatório do Projeto de Ruas de Braga
            fieldset.w3-margin.w3-center
                p.w3-panel Data de entrega: 2023-06-24
                p.w3-panel UC: Engenharia Web - 2023
                p.w3-panel O projeto foi desenvolvido pelos seguintes elementos:
                ul.w3-ul
                    li
                        a(href="https://github.com/0HenriqueFernandes0", class="w3-hover-text-blue") 0HenriqueFernandes0
                    li
                        a(href="https://github.com/joaocasr", class="w3-hover-text-blue") João Paulo Peixoto Castro, A97223 - joaocasr
                    li
                        a(href="https://github.com/Cavalex", class="w3-hover-text-blue") Mateus Pereira, A91924 - Cavalex

            // Descrição dos Datasets
            h5.w3-margin(style="font-weight: 600 !important;") Descrição dos Datasets:
            ul.w3-light-grey.w3-margin(style="padding-top:8px;padding-right:8px; padding-bottom:8px;")
                li
                    p(style="font-weight: 600 !important;") Dataset de Ruas:
                | O dataset principal era  constituído por 60 Ficheiros XML, sendo que cada um possuía informações de cada uma das ruas de Braga, nomeadamente, casas,imagens, descrição, proprietários, rendas, etc...
                | Como ponto de partida foi desenvolvido um script em python que vai iterar por cada um dos ficheiros presentes na diretoria dos dados e irá converté-los para um formato json. Para isso recorremos a 
                | um módulo python 'xmltodict'. Foi feito um tratamento adicional como a inserção de identificadores _id, alteracao da algumas estruturas de dados de certos campos, adição de expressões regulares de
                | substituição, de forma a permitir a interpolação de tags em pug, entre outros procedimentos.

                li
                    p(style="font-weight: 600 !important;") Dataset de Ruas Relacionadas:
                | O dataset de ruas relacionadas foi construído com o auxílio do script python 'ruas_relacionadas.py' que tem como entrada o streetdb.json (dataset das ruas). Para cada uma das ruas verificámos se existia 
                | uma rua com a mesma palavra-chave de um dado tipo. Logo, cada uma das ruas terá um dicionário semelhante a:
                - var a= "{ _id: xxx, nome: xxx,lugares : [{id:...,nome:....,atributo:....},...] ,entidades=[{id:...,nome:....,atributo:....},...], data=[{id:...,nome:....,atributo:....},...] }"
                pre
                    code.
                        #{JSON.stringify(a, null, 2)}
                | Como podemos ver cada uma das ruas terá três listas de ruas relacionadas, uma por lugar, outra por entidade e outra por data.     

                li 
                    p(style="font-weight: 600 !important;") Dataset de Comentários: 
                | O modelo do dataset é constituído por uma data,um parágrafo, um identificador da rua correspondente ao comentário, assim como informação respetiva ao utilizador desse comentário.
                | O POST e o GET de comentários são feitos com o auxílio do JQuery. A informação do utilizador encontra-se no value de um input com type hidden (username e imagem de perfil). 
                li 
                    p(style="font-weight: 600 !important;") Dataset de Utilizadores: 
                | O modelo do dataset é constituído por um username,password, email, nome, data de criação da conta, imagem de perfil, o papel do utilizador no sistema, e se este se encontra ativo.
            
            // Serviços implementados
            h5.w3-margin(style="font-weight: 600 !important;") Serviços implementados:
            ul.w3-light-grey.w3-margin(style="padding-top:8px;padding-right:8px; padding-bottom:8px;")
                //p
                //ul 
                li
                    p(style="font-weight: 600 !important;") Api de dados
                | A api de dados responde na porta 7777 e às seguintes rotas: 
                br
                br
                b GET /api/ruas 
                | - devolve uma lista com todas as ruas
                br
                br
                b GET /api/ruas/:idRua
                | - devolve o registo da rua com o identificador :idRua
                br
                br
                b GET /api/ruas/related/:idRua
                | - devolve um registo de ruas relacionadas com a rua de identificador :idRua
                br
                br
                b GET /api/ruas/comentarios/:idRua
                | - devolve uma lista de comentários respetivos à rua de identificador :idRua
                br
                br
                b GET /api/ruas/comentarios
                | - devolve uma lista de todos os comentários
                br
                br
                b POST /api/ruas/comentarios
                | - acrescenta um registo de um comentário à coleção de comentarios
                br
                br
                b POST /api/ruas
                | - acrescenta um registo de um rua à coleção streets
                | No que toca à resposta a esta rota criou-se uma função auxiliar que vai percorrer as listas de para.lugar, para.data, e para.entidades da respetiva rua e verificar com queries definidas no controller
                | a lista de ruas que possuem as palavras-chave em comum. Logo, este método teve que ser assíncrono de forma a esperar(await) que os dados da query realizada fossem obtidos em primeiro lugar. Estes dados foram 
                | sendo armazenados num dicionário do tipo : const related ={"_id":rua._id,nome:rua.nome,lugares: [], data: [], entidades: [] }.
                | Por exemplo,no que toca a procurar as ruas que possuem o mesmo lugar, foi desenvolvida a seguinte query: Mapa.find({"$or":[{"para": {"$elemMatch": {"lugar": {"$in": [lugar]}}}},
                | {"listacasas": {"$elemMatch": {"desc.para.lugar": {"$in": [lugar]}}}}]}), ou seja, procurou-se a presença de 'lugar' na 'lista de casas',nomeadamente na descrição das casas do para.lugar (lista) e no 'para' 
                | na descrição da rua na lista lugar . No entanto ao adicionarmos uma nova rua, também temos de ter em atenção que as restantes ruas já existentes têm que ter em conta a presença desta nova rua no seu índice de
                | ruas relacionadas, pelo que fizemos push da rua em questão no sentido reverso, como se mostra no exemplo seguinte: Relations.updateOne({"_id":obj.id},{$push:{lugares:{id:obj.nid,nome:obj.nome,atributo:obj.atributo}}}).
                | Como este processo é feito de forma assíncrona, em que temos de esperar pela resposta das queries sobre a base de dados das coleções relations e streets, este processo pode ser um pouco lento, no entanto, como esse registo passa 
                | a ser inserido no final no dataset de relations, este processo só se realiza uma vez na criação.
                br
                br
                b DELETE /api/ruas/:id
                | - elimina um registo à coleção streets
                | Nesta rota foi necessário ter o cuidado de remover as ruas relacionadas à rua com identificador :id, assim como eliminar os seus comentários respetivos de modo a termos consistência na base de dados.
                br
                br
                li
                    p(style="font-weight: 600 !important;") Interface
                | Este serviço responde na porta 7778 e irá responder aos seguintes endereços e rotas:
                br
                br
                b http://localhost:7778/
                | - Este endereço corresponde à página de autenticação de conta. Na rota GET / há uma verificação da existencia da token que vem nos cookies com o auxilio da libraria jsonwebtoken. Caso exista e a autenticação seja efetuada com sucesso
                | é colocada a token na query do URL e é feita a renderização da página de listas das ruas e passámos a informação do user que se encontra no payload do request, de forma a que
                | quando seja apresentada a página, o utilizador tenha a garantia de que o processo foi bem sucedido e que está conectado ao sistema com a sua conta. A interface de modo a obter os
                | dados das ruas realiza um método GET com o auxílio da libraria axios. Para este efeito foi realizado um axios.get(env.apiAccessPoint+"/ruas"+"?token=" + req.cookies.token), em que 
                | apiAccessPoint é uma variável correspondente ao ponto de acesso para obter os dados em json igual a http://localhost:7777/api .
                br
                br
                b http://localhost:7778/ruas/
                | - Este endereço corresponde à página da listagem de ruas. Como a página das ruas se trata de uma zona protegida é feita a verificação do token. Caso exista a token e não seja revogado
                | é feito o next() sendo feito o próxima linha de execução, visto que estamos perante uma execução em pipeline. Caso contrário o utilizador é redirecionado para a página de autenticação.
                | Os dados são obtidos com o método GET do axios do seguinte modo axios.get(env.apiAccessPoint+"/ruas"+"?token=" + req.cookies.token). O resultado do callback passamos para fazer a renderização da 
                | página com esses dados.
                br
                br
                b http://localhost:7778/ruas/:idRua
                | - Este endereço corresponde à página com informação da rua selecionada presenta na lista de ruas. À semelança da rota anterior há verificação do token, e depois 
                | é feito um pedido axios GET que devolve uma promessa que terá os dados da rua em questão: axios.get(env.apiAccessPoint+"/ruas/"+req.params.idRua+"?token=" + req.cookies.token).
                | Dentro do método then é feita outra promessa que irá devolver as ruas relacionadas com a rua em questão axios.get(env.apiAccessPoint+"/ruas/related/"+req.params.idRua+ "?token=" + req.cookies.token).
                | Por fim, é feita a renderização da página da rua com essa informação.
                br
                br
                b GET /delete/:idRua
                | - É feita a verificação do token e de seguida é feito pedido DELETE do axios com o id da rua a eliminar: axios.delete(env.apiAccessPoint+"/ruas/"+req.params.idRua).
                | Após este processo o utilizador é redirecionado para a página das ruas.
                br
                br
                b GET /add
                | - Este endereço corresponde à página para a adição de uma nova rua.
                br
                br                
                b POST /add
                | - Nesta rota é feita uma verificação do token, depois com o auxílio da libraria multer especificámos os campos de adição de imagens da rua nova a adicionar. Existem dois campos/fields, um é o 'antigas'
                | e o outro é atuais (correspondem aos nomes dos inputs file). Por sua vez definimos um número máximo de 10 imagens em cada campo. No request files obtivemos o path destes ficheiros,e com a libraria filesystem 
                | alteramos o path destas, de forma a ficarem hospedadas na diretoria public do serviço da interface. De seguida, procedeu-se à manipulacao do body do request, para obtermos as imagens com este novo path. Por último,
                | fizemos uma travessia por cada uma das descrição lugar,data,entidade novas da rua a inserir, colocando-as numa lista de dicionários no body.
                br
                br                
                li
                    p(style="font-weight: 600 !important;") Autenticação
                br
    footer.w3-center.w3-black.w3-padding-16.w3-container(style="margin-top: auto; width:100%;")
        a(href="/creditos") Créditos
        p ©2023 All Rights Reserved